"""
Задание 1

Дана переменная, в которой хранится слово из латинских букв. Напишите код, который выводит на экран:
среднюю букву, если число букв в слове нечетное;
две средних буквы, если число букв четное.
Примеры работы программы:
"""
word = "test"
len_word = len(word)
if len_word % 2 == 0:
    mid1 = (len_word // 2) - 1
    mid2 = len_word // 2
    print(word[mid1] + word[mid2])
else:
    middle_index = len_word // 2
    print(word[middle_index])
"""
Результат:
es
Рефакторинг:
"""
middle = (len_word // 2)
is_even = len_word % 2 == 0
print(word[middle - 1 if is_even else middle: middle + 1])
"""
Результат:
es
"""
word = "testing"
middle = (len_word // 2)
is_even = len_word % 2 == 0
print(word[middle - 1 if is_even else middle: middle + 1])
"""
Результат:
t
"""

"""
Задание 2

Напишите программу, которая последовательно запрашивает у пользователя числа (по одному за раз) и после первого нуля выводит сумму всех ранее введенных чисел.
Примеры работы программы:
Введите число: 1
Введите число: 4
Введите число: 6
Введите число: 0
"""
sum_numbers = 0
while True:
    number = int(input("Введите число: "))
    if number == 0:
        print(sum_numbers)
        break
    sum_numbers += number
"""
Результат:11
"""
sum_numbers = 0
while True:
    number = int(input("Введите число: "))
    if number == 0:
        print(sum_numbers)
        break
    sum_numbers += number
"""
Введите число: 0
Результат:0
"""

"""
Задание 3

Мы делаем MVP dating-сервиса, и у нас есть список парней и девушек.
Выдвигаем гипотезу: лучшие рекомендации мы получим, если просто отсортируем имена по алфавиту и познакомим людей с одинаковыми индексами после сортировки! Но мы не будем никого знакомить, если кто-то может остаться без пары:
Примеры работы программы:
boys = [‘Peter’, ‘Alex’, ‘John’, ‘Arthur’, ‘Richard’]
girls = [‘Kate’, ‘Liza’, ‘Kira’, ‘Emma’, ‘Trisha’]
"""

boys = ["Peter", "Alex", "John", "Arthur", "Richard"]
girls = ["Kate", "Liza", "Kira", "Emma", "Trisha"]

if len(boys) != len(girls):
    print("Внимание, кто-то может остаться без пары!")
else:
    sorted_boys = sorted(boys)
    sorted_girls = sorted(girls)
    pairs = []
    for boy, girl in zip(sorted_boys, sorted_girls):
        pairs.append(f"{boy} и {girl}")
    print("\nИдеальные пары:")
    for pair in pairs:
        print(pair)
"""
Результат:

Идеальные пары:
Alex и Emma
Arthur и Kate
John и Kira
Peter и Liza
Richard и Trisha
"""

"""
boys = [‘Peter’, ‘Alex’, ‘John’, ‘Arthur’, ‘Richard’, ‘Michael’]
girls = [‘Kate’, ‘Liza’, ‘Kira’, ‘Emma’, ‘Trisha’]
"""
boys = ["Peter", "Alex", "John", "Arthur", "Richard", "Michael"]
girls = ["Kate", "Liza", "Kira", "Emma", "Trisha"]
if len(boys) != len(girls):
    print("Внимание, кто-то может остаться без пары!")
else:
    print("Идеальные пары:")
    sorted_boys = sorted(boys)
    sorted_girls = sorted(girls)
    for boy, girl in zip(sorted_boys, sorted_girls):
        print(f"{boy} и {girl}")
"""
Результат:
Внимание, кто-то может остаться без пары!
"""

"""
Задание 4

У нас есть список, содержащий информацию о среднедневной температуре в Фаренгейтах за произвольный период по странам (структура данных в примере). Необходимо написать код, который рассчитает среднюю температуру за период в Цельсиях(!) для каждой страны.
Пример работы программы:

countries_temperature = [
[‘Таиланд’, [75.2, 77, 78.8, 73.4, 68, 75.2, 77]],
[‘Германия’, [57.2, 55.4, 59, 59, 53.6]],
[‘Россия’, [35.6, 37.4, 39.2, 41, 42.8, 39.2, 35.6]],
[‘Польша’, [50, 50, 53.6, 57.2, 55.4, 55.4]]
]
"""

countries_temperature = [
    ['Таиланд', [75.2, 77, 78.8, 73.4, 68, 75.2, 77]],
    ['Германия', [57.2, 55.4, 59, 59, 53.6]],
    ['Россия', [35.6, 37.4, 39.2, 41, 42.8, 39.2, 35.6]],
    ['Польша', [50, 50, 53.6, 57.2, 55.4, 55.4]]
]

results = []
for country in countries_temperature:
    name, temps = country[0], country[1]
    average_f = sum(temps) / len(temps)
    average_c = (average_f - 32) * 5 / 9
    average_c_rounded = round(average_c, 1)
    results.append((name, average_c_rounded))

print("Средняя температура в странах:")
for country in results:
    print(f"{country[0]} - {country[1]} С")

"""
Результат:

Средняя температура в странах:
Таиланд - 23.9 С
Германия - 13.8 С
Россия - 3.7 С
Польша - 12.0 С
"""

"""
Задание 5

Имеется список с транспортными номерами. Необходимо написать код, который проверит каждый номер на валидность (1 буква, 3 цифры, 2 буквы, 2-3 цифры). Обратите внимание, что не все буквы кириллического алфавита используются в транспортных номерах.
Если номер валиден, то вывести его в нужном формавте (пример ниже), а если не валиден — вывести текст. При решении помогут регулярные выражения, с которыми будет знакомство на практике.
Примеры работы программы:
car_ids = [‘А222ВС96’, ‘АБ22ВВ193’]
"""

import re
car_ids = ['А222ВС96', 'АБ22ВВ193']
valid_letters = 'АВЕКМНОРСТУХ'
pattern = fr'^([{valid_letters}])(\d{{3}})([{valid_letters}]{{2}})(\d{{2,3}})$'
for car_id in car_ids:
    match = re.fullmatch(pattern, car_id)
    if match:
        _, _, _, region = match.groups()
        formatted_number = f"{match.group(1)}{match.group(2)}{match.group(3)}"
        print(f"Номер {formatted_number} валиден. Регион: {region}")
    else:
        print(f"Номер {car_id} не валиден")

"""
Результат:

Номер А222ВС валиден. Регион: 96
Номер АБ22ВВ193 не валиден
"""

"""
Задание 6 (необязательное)

Дан поток логов по количеству просмотренных страниц для каждого пользователя (пользователь,дата;просмотры). Вам необходимо написать алгоритм, который считает среднее значение просмотров на пользователя. Т. е. надо посчитать отношение суммы всех просмотров к количеству уникальных пользователей. И тут регулярные выражения облегчат немного реализацию.
Примеры работы программы: 1.

stream = [
‘user4,2021-01-01;3’,
‘user3,2022-01-07;4’,
‘user2,2022-03-29;1’,
‘user1,2020-04-04;13’,
‘user2,2022-01-05;7’,
‘user1,2021-06-14;4’,
‘user3,2022-07-02;10’,
‘user4,2021-03-21;19’,
‘user4,2022-03-22;4’,
‘user4,2022-04-22;8’,
‘user4,2021-05-03;9’,
‘user4,2022-05-11;11’
]
Результат:
Среднее количество просмотров на уникального пользователя: 23.25

stream = [
‘user100,2022-01-01;150’,
‘user99,2022-01-07;205’,
‘user1001,2022-03-29;81’
]
Результат:
Среднее количество просмотров на уникального пользователя: 145.33

"""